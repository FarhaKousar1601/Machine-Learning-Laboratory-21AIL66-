{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fe079724",
   "metadata": {
    "_cell_guid": "3aed06db-02cd-4aff-acc9-f58eabf51357",
    "_uuid": "d52d87df-32f9-4353-8549-3e4c5842dd7f",
    "papermill": {
     "duration": 0.008015,
     "end_time": "2024-07-22T17:34:12.554130",
     "exception": false,
     "start_time": "2024-07-22T17:34:12.546115",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "1. Aim: Illustrate and Demonstrate the working model and principle of Find-S algorithm.\n",
    "\n",
    "\n",
    "Program: For a given set of training data examples stored in a .CSV file, implement and demonstrate the Find-S algorithm to output a description of the set of all hypotheses consistent with the training examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0fb1fc68",
   "metadata": {
    "_cell_guid": "dbb23af3-e628-438d-bb31-118bdd199fdd",
    "_uuid": "6da8d3ab-65da-4c77-bb87-396209876197",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:12.572187Z",
     "iopub.status.busy": "2024-07-22T17:34:12.571066Z",
     "iopub.status.idle": "2024-07-22T17:34:12.608037Z",
     "shell.execute_reply": "2024-07-22T17:34:12.606450Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.049029,
     "end_time": "2024-07-22T17:34:12.610851",
     "exception": false,
     "start_time": "2024-07-22T17:34:12.561822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Sky AirTemp Humidity Wind Water Forecast EnjoySport']\n",
      "['Sunny Warm Normal Strong Warm Same Yes']\n",
      "['Sunny Warm High Strong Warm Same Yes']\n",
      "['Rainy Cold High Strong Warm Change No']\n",
      "['Sunny Warm High Strong Cool Change Yes']\n",
      "Most specific hypothesis is\n",
      "[['0', '0', '0', '0', '0', '0']]\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "\n",
    "# Open the CSV file\n",
    "with open('/kaggle/input/tennis-csv/tennis.csv', 'r') as f:\n",
    "    reader = csv.reader(f)\n",
    "    your_list = list(reader)\n",
    "\n",
    "# Initialize the hypothesis\n",
    "h = [['0', '0', '0', '0', '0', '0']]\n",
    "\n",
    "# Process each row in the dataset\n",
    "for i in your_list:\n",
    "    print(i)\n",
    "    if i[-1] == \"True\":\n",
    "        j = 0\n",
    "        for x in i:\n",
    "            if x != \"True\":\n",
    "                if x != h[0][j] and h[0][j] == '0':\n",
    "                    h[0][j] = x\n",
    "                elif x != h[0][j] and h[0][j] != '0':\n",
    "                    h[0][j] = '?'\n",
    "                else:\n",
    "                    pass\n",
    "            j += 1\n",
    "\n",
    "# Print the most specific hypothesis\n",
    "print(\"Most specific hypothesis is\")\n",
    "print(h)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "684c1c88",
   "metadata": {
    "papermill": {
     "duration": 0.007302,
     "end_time": "2024-07-22T17:34:12.626006",
     "exception": false,
     "start_time": "2024-07-22T17:34:12.618704",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "2.Aim: Demonstrate the working model and principle of candidate elimination algorithm.\n",
    "Program: For a given set of training data examples stored in a .CSV file, implement and demonstrate the Candidate-Elimination algorithm to output a description of the set of all hypotheses consistent with the training examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8c8598df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:12.643490Z",
     "iopub.status.busy": "2024-07-22T17:34:12.643066Z",
     "iopub.status.idle": "2024-07-22T17:34:12.658202Z",
     "shell.execute_reply": "2024-07-22T17:34:12.656750Z"
    },
    "papermill": {
     "duration": 0.026669,
     "end_time": "2024-07-22T17:34:12.660660",
     "exception": false,
     "start_time": "2024-07-22T17:34:12.633991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Steps of Candidate Elimination Algorithm 1\n",
      "[]\n",
      "[]\n",
      "Steps of Candidate Elimination Algorithm 2\n",
      "[]\n",
      "[]\n",
      "Steps of Candidate Elimination Algorithm 3\n",
      "[]\n",
      "[]\n",
      "Steps of Candidate Elimination Algorithm 4\n",
      "[]\n",
      "[]\n",
      "Steps of Candidate Elimination Algorithm 5\n",
      "[]\n",
      "[]\n",
      "\n",
      "Final specific hypothesis:\n",
      " []\n",
      "\n",
      "Final general hypothesis:\n",
      " []\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "\n",
    "# Opens the CSV file \"tennis.csv\" and reads its contents\n",
    "with open(\"/kaggle/input/tennis-csv/tennis.csv\") as f:\n",
    "    csv_file = csv.reader(f)\n",
    "    data = list(csv_file)\n",
    "\n",
    "# Initializes the specific hypothesis 's' and the general hypothesis 'gh'\n",
    "s = ['?' for i in range(len(data[0])-1)]\n",
    "gh = [['?' for i in range(len(s))] for j in range(len(s))]\n",
    "\n",
    "# Iterates through each data instance in 'data'\n",
    "for instance in data:\n",
    "    # Checks if the last attribute of the instance is \"Yes\"\n",
    "    if instance[-1] == \"Yes\":\n",
    "        # Updates 's' and 'gh' based on positive instance\n",
    "        for j in range(len(s)):\n",
    "            if instance[j] != s[j] and s[j] == '?':\n",
    "                s[j] = instance[j]\n",
    "            elif instance[j] != s[j] and s[j] != '?':\n",
    "                s[j] = '?'\n",
    "    elif instance[-1] == \"No\":\n",
    "        # Updates 'gh' based on negative instance\n",
    "        for j in range(len(s)):\n",
    "            if instance[j] != s[j]:\n",
    "                gh[j][j] = s[j]\n",
    "            else:\n",
    "                gh[j][j] = '?'\n",
    "\n",
    "    # Prints the steps of the Candidate Elimination Algorithm\n",
    "    print(\"Steps of Candidate Elimination Algorithm\", data.index(instance) + 1)\n",
    "    print(s)\n",
    "    print(gh)\n",
    "\n",
    "    # Removes inconsistent hypotheses from 'gh'\n",
    "    g = []\n",
    "    for i in gh:\n",
    "        if i not in g:\n",
    "            g.append(i)\n",
    "\n",
    "    # Ends the loop if 's' becomes the final hypothesis\n",
    "    if len(g) == 1:\n",
    "        break\n",
    "\n",
    "# Prints the final specific and general hypotheses\n",
    "print(\"\\nFinal specific hypothesis:\\n\", s)\n",
    "print(\"\\nFinal general hypothesis:\\n\", g)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d26f4c3",
   "metadata": {
    "papermill": {
     "duration": 0.007348,
     "end_time": "2024-07-22T17:34:12.675854",
     "exception": false,
     "start_time": "2024-07-22T17:34:12.668506",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "3)Aim: To construct the Decision tree using the training data sets under supervised learning concept.\n",
    "Program: Write a program to demonstrate the working of the decision tree based ID3 algorithm. Use an appropriate data set for building the decision tree and apply this knowledge to classify a new sample"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd05cea7",
   "metadata": {
    "papermill": {
     "duration": 0.007367,
     "end_time": "2024-07-22T17:34:12.690833",
     "exception": false,
     "start_time": "2024-07-22T17:34:12.683466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "4)Aim: To understand the working principle of Artificial Neural network with feed forward and feed backward principle.\n",
    "Program: Build an Artificial Neural Network by implementing the Backpropagation algorithm and test the same using appropriate data sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab41fcc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:12.708442Z",
     "iopub.status.busy": "2024-07-22T17:34:12.707996Z",
     "iopub.status.idle": "2024-07-22T17:34:13.636397Z",
     "shell.execute_reply": "2024-07-22T17:34:13.635051Z"
    },
    "papermill": {
     "duration": 0.940059,
     "end_time": "2024-07-22T17:34:13.638793",
     "exception": false,
     "start_time": "2024-07-22T17:34:12.698734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Constructed Decision Tree:\n",
      "{'Outlook': {'Overcast': 'Yes', 'Rain': {'Wind': {'Strong': 'No', 'Weak': 'Yes'}}, 'Sunny': {'Humidity': {'High': 'No', 'Normal': 'Yes'}}}}\n",
      "\n",
      "Classification Result for the Sample:\n",
      "No\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from collections import Counter\n",
    "# Defining the dataset\n",
    "data = [\n",
    "    [\"Outlook\", \"Temperature\", \"Humidity\", \"Wind\", \"PlayTennis\"],\n",
    "    [\"Sunny\", \"Hot\", \"High\", \"Weak\", \"No\"],\n",
    "    [\"Sunny\", \"Hot\", \"High\", \"Strong\", \"No\"],\n",
    "    [\"Overcast\", \"Hot\", \"High\", \"Weak\", \"Yes\"],\n",
    "    [\"Rain\", \"Mild\", \"High\", \"Weak\", \"Yes\"],\n",
    "    [\"Rain\", \"Cool\", \"Normal\", \"Weak\", \"Yes\"],\n",
    "    [\"Rain\", \"Cool\", \"Normal\", \"Strong\", \"No\"],\n",
    "    [\"Overcast\", \"Cool\", \"Normal\", \"Strong\", \"Yes\"],\n",
    "    [\"Sunny\", \"Mild\", \"High\", \"Weak\", \"No\"],\n",
    "    [\"Sunny\", \"Cool\", \"Normal\", \"Weak\", \"Yes\"],\n",
    "    [\"Rain\", \"Mild\", \"Normal\", \"Weak\", \"Yes\"],\n",
    "    [\"Sunny\", \"Mild\", \"Normal\", \"Strong\", \"Yes\"],\n",
    "    [\"Overcast\", \"Mild\", \"High\", \"Strong\", \"Yes\"],\n",
    "    [\"Overcast\", \"Hot\", \"Normal\", \"Weak\", \"Yes\"],\n",
    "    [\"Rain\", \"Mild\", \"High\", \"Strong\", \"No\"]\n",
    "]\n",
    "\n",
    "# Creating a DataFrame from the dataset\n",
    "df = pd.DataFrame(data[1:], columns=data[0])\n",
    "def entropy(target_col):\n",
    "    elements, counts = np.unique(target_col, return_counts=True)\n",
    "    entropy = np.sum([(-counts[i]/np.sum(counts)) * np.log2(counts[i]/np.sum(counts)) for i in range(len(elements))])\n",
    "    return entropy\n",
    "def information_gain(data, split_attribute, target_attribute):\n",
    "    total_entropy = entropy(data[target_attribute])\n",
    "    values, counts = np.unique(data[split_attribute], return_counts=True)\n",
    "    weighted_entropy = np.sum([(counts[i]/np.sum(counts)) * entropy(data[data[split_attribute] == values[i]][target_attribute]) for i in range(len(values))])\n",
    "    information_gain = total_entropy - weighted_entropy\n",
    "    return information_gain\n",
    "def ID3(data, original_data, features, target_attribute, parent_node_class=None):\n",
    "    if len(np.unique(data[target_attribute])) <= 1:\n",
    "        return np.unique(data[target_attribute])[0]\n",
    "    elif len(data) == 0:\n",
    "        return np.unique(original_data[target_attribute])[np.argmax(np.unique(original_data[target_attribute], return_counts=True)[1])]\n",
    "    elif len(features) == 0:\n",
    "        return parent_node_class\n",
    "    else:\n",
    "        parent_node_class = np.unique(data[target_attribute])[np.argmax(np.unique(data[target_attribute], return_counts=True)[1])]\n",
    "        item_values = [information_gain(data, feature, target_attribute) for feature in features]\n",
    "        best_feature_index = np.argmax(item_values)\n",
    "        best_feature = features[best_feature_index]\n",
    "        tree = {best_feature: {}}\n",
    "        features = [i for i in features if i != best_feature]\n",
    "        for value in np.unique(data[best_feature]):\n",
    "            value_sub_data = data[data[best_feature] == value]\n",
    "            subtree = ID3(value_sub_data, original_data, features, target_attribute, parent_node_class)\n",
    "            tree[best_feature][value] = subtree\n",
    "        return tree\n",
    "def classify(sample, tree):\n",
    "    for attribute in list(sample.keys()):\n",
    "        if attribute in tree.keys():\n",
    "            try:\n",
    "                result = tree[attribute][sample[attribute]]\n",
    "            except:\n",
    "                return None\n",
    "            result = tree[attribute][sample[attribute]]\n",
    "            if isinstance(result, dict):\n",
    "                return classify(sample, result)\n",
    "            else:\n",
    "                return result\n",
    "# List of features\n",
    "features = list(df.columns[:-1])\n",
    "\n",
    "# Target attribute\n",
    "target_attribute = df.columns[-1]\n",
    "\n",
    "# Constructing the decision tree\n",
    "decision_tree = ID3(df, df, features, target_attribute)\n",
    "\n",
    "# Sample to classify\n",
    "sample = {\n",
    "    \"Outlook\": \"Sunny\",\n",
    "    \"Temperature\": \"Cool\",\n",
    "    \"Humidity\": \"High\",\n",
    "    \"Wind\": \"Strong\"\n",
    "}\n",
    "\n",
    "# Classifying the sample\n",
    "classification_result = classify(sample, decision_tree)\n",
    "\n",
    "print(\"Constructed Decision Tree:\")\n",
    "print(decision_tree)\n",
    "\n",
    "print(\"\\nClassification Result for the Sample:\")\n",
    "print(classification_result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4941a8c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:13.657034Z",
     "iopub.status.busy": "2024-07-22T17:34:13.656079Z",
     "iopub.status.idle": "2024-07-22T17:34:18.364943Z",
     "shell.execute_reply": "2024-07-22T17:34:18.363555Z"
    },
    "papermill": {
     "duration": 4.72097,
     "end_time": "2024-07-22T17:34:18.367553",
     "exception": false,
     "start_time": "2024-07-22T17:34:13.646583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0, Loss: 0.3037\n",
      "Epoch: 1000, Loss: 0.5000\n",
      "Epoch: 2000, Loss: 0.5000\n",
      "Epoch: 3000, Loss: 0.5000\n",
      "Epoch: 4000, Loss: 0.5000\n",
      "Epoch: 5000, Loss: 0.5000\n",
      "Epoch: 6000, Loss: 0.5000\n",
      "Epoch: 7000, Loss: 0.5000\n",
      "Epoch: 8000, Loss: 0.5000\n",
      "Epoch: 9000, Loss: 0.5000\n",
      "Accuracy: 55.00%\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.datasets import make_moons\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "# Activation function and its derivative\n",
    "sigmoid = lambda x: 1 / (1 + np.exp(-x))\n",
    "sigmoid_derivative = lambda x: x * (1 - x)\n",
    "\n",
    "# ANN class\n",
    "class NeuralNetwork:\n",
    "    def __init__(self, input_size, hidden_size, output_size):\n",
    "        self.W1 = np.random.randn(input_size, hidden_size)\n",
    "        self.b1 = np.zeros((1, hidden_size))\n",
    "        self.W2 = np.random.randn(hidden_size, output_size)\n",
    "        self.b2 = np.zeros((1, output_size))\n",
    "\n",
    "    def forward(self, X):\n",
    "        self.a1 = sigmoid(np.dot(X, self.W1) + self.b1)\n",
    "        self.a2 = sigmoid(np.dot(self.a1, self.W2) + self.b2)\n",
    "        return self.a2\n",
    "\n",
    "    def backward(self, X, y, output):\n",
    "        d_output = (y - output) * sigmoid_derivative(output)\n",
    "        d_hidden = d_output.dot(self.W2.T) * sigmoid_derivative(self.a1)\n",
    "\n",
    "        self.W2 += self.a1.T.dot(d_output)\n",
    "        self.b2 += np.sum(d_output, axis=0, keepdims=True)\n",
    "        self.W1 += X.T.dot(d_hidden)\n",
    "        self.b1 += np.sum(d_hidden, axis=0, keepdims=True)\n",
    "\n",
    "    def train(self, X, y, epochs=10000):\n",
    "        for epoch in range(epochs):\n",
    "            output = self.forward(X)\n",
    "            self.backward(X, y, output)\n",
    "            if epoch % 1000 == 0:\n",
    "                loss = np.mean(np.square(y - output))\n",
    "                print(f'Epoch: {epoch}, Loss: {loss:.4f}')\n",
    "\n",
    "# Create and preprocess dataset\n",
    "X, y = make_moons(n_samples=1000, noise=0.2)\n",
    "y = OneHotEncoder().fit_transform(y.reshape(-1, 1)).toarray()\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "# Initialize and train network\n",
    "nn = NeuralNetwork(X_train.shape[1], 10, y_train.shape[1])\n",
    "nn.train(X_train, y_train)\n",
    "\n",
    "# Test network\n",
    "output = nn.forward(X_test)\n",
    "predictions = np.argmax(output, axis=1)\n",
    "accuracy = np.mean(predictions == np.argmax(y_test, axis=1))\n",
    "print(f'Accuracy: {accuracy * 100:.2f}%')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de664698",
   "metadata": {
    "papermill": {
     "duration": 0.008425,
     "end_time": "2024-07-22T17:34:18.384846",
     "exception": false,
     "start_time": "2024-07-22T17:34:18.376421",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "5)Aim: Demonstrate the text classifier using Naïve bayes classifier algorithm.\n",
    "Program: Write a program to implement the naive Bayesian classifier for a sample training data set stored as a .CSV file. Compute the accuracy of the classifier, considering few test data sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f2552236",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:18.405031Z",
     "iopub.status.busy": "2024-07-22T17:34:18.404187Z",
     "iopub.status.idle": "2024-07-22T17:34:18.619085Z",
     "shell.execute_reply": "2024-07-22T17:34:18.617714Z"
    },
    "papermill": {
     "duration": 0.228041,
     "end_time": "2024-07-22T17:34:18.621852",
     "exception": false,
     "start_time": "2024-07-22T17:34:18.393811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150 entries, 0 to 149\n",
      "Data columns (total 6 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Unnamed: 0     150 non-null    int64  \n",
      " 1   SepalLengthCm  150 non-null    object \n",
      " 2   SepalWidthCm   149 non-null    float64\n",
      " 3   PetalLengthCm  149 non-null    object \n",
      " 4   PetalWidthCm   150 non-null    float64\n",
      " 5   Species        149 non-null    object \n",
      "dtypes: float64(2), int64(1), object(3)\n",
      "memory usage: 7.2+ KB\n",
      "None\n",
      "   Unnamed: 0 SepalLengthCm  SepalWidthCm PetalLengthCm  PetalWidthCm  \\\n",
      "0           1           5.1           3.5           1.4           0.2   \n",
      "1           2           4.9           NaN           1.4           0.2   \n",
      "2           3           4.7           3.2           1.3           0.2   \n",
      "3           4            ??           3.1           1.5           0.2   \n",
      "4           5             5           3.6           ###           0.2   \n",
      "\n",
      "       Species  \n",
      "0  Iris-setosa  \n",
      "1          NaN  \n",
      "2  Iris-setosa  \n",
      "3  Iris-setosa  \n",
      "4  Iris-setosa  \n",
      "['Iris-setosa' nan 'Iris-versicolor' 'Iris-virginica']\n",
      "Accuracy: 93.33%\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from collections import defaultdict\n",
    "\n",
    "class NaiveBayesClassifier:\n",
    "    def __init__(self):\n",
    "        self.priors = {}\n",
    "        self.likelihoods = defaultdict(dict)\n",
    "\n",
    "    def fit(self, X, y):\n",
    "        self.classes = np.unique(y)\n",
    "        total_samples = len(y)\n",
    "\n",
    "        for cls in self.classes:\n",
    "            X_cls = X[y == cls]\n",
    "            self.priors[cls] = len(X_cls) / total_samples\n",
    "\n",
    "            for column in X.columns:\n",
    "                self.likelihoods[column][cls] = X_cls[column].value_counts(normalize=True).to_dict()\n",
    "\n",
    "    def predict(self, X):\n",
    "        results = []\n",
    "\n",
    "        for i in range(len(X)):\n",
    "            posteriors = {}\n",
    "\n",
    "            for cls in self.classes:\n",
    "                prior = np.log(self.priors[cls])\n",
    "                likelihood = sum(\n",
    "                    np.log(self.likelihoods[col].get(cls, {}).get(X.iloc[i][col], 1e-6))\n",
    "                    for col in X.columns\n",
    "                )\n",
    "                posteriors[cls] = prior + likelihood\n",
    "\n",
    "            results.append(max(posteriors, key=posteriors.get))\n",
    "\n",
    "        return results\n",
    "\n",
    "    def accuracy(self, y_true, y_pred):\n",
    "        return np.mean(np.array(y_true) == np.array(y_pred))\n",
    "\n",
    "# Load data from CSV file\n",
    "data = pd.read_csv('/kaggle/input/iris-dataset/Iris_data_sample.csv')\n",
    "\n",
    "# Inspect data for inconsistencies\n",
    "print(data.info())\n",
    "print(data.head())\n",
    "\n",
    "# Check for NaN values and data types in target column\n",
    "print(data.iloc[:, -1].unique())\n",
    "\n",
    "# Separate features and target variable\n",
    "X = data.iloc[:, :-1]\n",
    "y = data.iloc[:, -1]\n",
    "\n",
    "# Clean target variable to ensure consistent data type\n",
    "y = y.astype(str)\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the Naive Bayes Classifier\n",
    "nb_classifier = NaiveBayesClassifier()\n",
    "nb_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test set\n",
    "y_pred = nb_classifier.predict(X_test)\n",
    "\n",
    "# Compute the accuracy\n",
    "accuracy = nb_classifier.accuracy(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy * 100:.2f}%')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ce4ad80",
   "metadata": {
    "papermill": {
     "duration": 0.009044,
     "end_time": "2024-07-22T17:34:18.640039",
     "exception": false,
     "start_time": "2024-07-22T17:34:18.630995",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "6)Aim: Demonstrate and Analyse the results sets obtained from Bayesian belief network Principle.\n",
    "Program:- Write a program to construct a Bayesian network considering medical data. Use this model to demonstrate the diagnosis of heart patients using standard Heart Disease Data Set. You can use Python ML library classes/API."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f2aa6b28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:18.660477Z",
     "iopub.status.busy": "2024-07-22T17:34:18.659629Z",
     "iopub.status.idle": "2024-07-22T17:34:36.436916Z",
     "shell.execute_reply": "2024-07-22T17:34:36.435202Z"
    },
    "papermill": {
     "duration": 17.790467,
     "end_time": "2024-07-22T17:34:36.439667",
     "exception": false,
     "start_time": "2024-07-22T17:34:18.649200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\r\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.2.2)\r\n",
      "Collecting pgmpy\r\n",
      "  Downloading pgmpy-0.1.25-py3-none-any.whl.metadata (6.4 kB)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas) (2023.4)\r\n",
      "Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from pgmpy) (3.2.1)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from pgmpy) (1.11.4)\r\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (from pgmpy) (1.2.2)\r\n",
      "Requirement already satisfied: pyparsing in /opt/conda/lib/python3.10/site-packages (from pgmpy) (3.1.1)\r\n",
      "Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from pgmpy) (2.1.2+cpu)\r\n",
      "Requirement already satisfied: statsmodels in /opt/conda/lib/python3.10/site-packages (from pgmpy) (0.14.1)\r\n",
      "Requirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from pgmpy) (4.66.4)\r\n",
      "Requirement already satisfied: joblib in /opt/conda/lib/python3.10/site-packages (from pgmpy) (1.4.2)\r\n",
      "Requirement already satisfied: opt-einsum in /opt/conda/lib/python3.10/site-packages (from pgmpy) (3.3.0)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->pgmpy) (3.2.0)\r\n",
      "Requirement already satisfied: patsy>=0.5.4 in /opt/conda/lib/python3.10/site-packages (from statsmodels->pgmpy) (0.5.6)\r\n",
      "Requirement already satisfied: packaging>=21.3 in /opt/conda/lib/python3.10/site-packages (from statsmodels->pgmpy) (21.3)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch->pgmpy) (3.13.1)\r\n",
      "Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch->pgmpy) (4.9.0)\r\n",
      "Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->pgmpy) (1.13.0)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->pgmpy) (3.1.2)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch->pgmpy) (2024.5.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch->pgmpy) (2.1.3)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->pgmpy) (1.3.0)\r\n",
      "Downloading pgmpy-0.1.25-py3-none-any.whl (2.0 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m35.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: pgmpy\r\n",
      "Successfully installed pgmpy-0.1.25\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install numpy pandas pgmpy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1b63ea4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:36.463322Z",
     "iopub.status.busy": "2024-07-22T17:34:36.462850Z",
     "iopub.status.idle": "2024-07-22T17:34:43.229540Z",
     "shell.execute_reply": "2024-07-22T17:34:43.228331Z"
    },
    "papermill": {
     "duration": 6.781948,
     "end_time": "2024-07-22T17:34:43.232216",
     "exception": false,
     "start_time": "2024-07-22T17:34:36.450268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample instances from the dataset are given below:\n",
      "   age  gender  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
      "0   63       1   1       145   233    1        2      150      0      2.3   \n",
      "1   67       1   4       160   286    0        2      108      1      1.5   \n",
      "2   67       1   4       120   229    0        2      129      1      2.6   \n",
      "3   37       1   3       130   250    0        0      187      0      3.5   \n",
      "4   41       0   2       130   204    0        2      172      0      1.4   \n",
      "\n",
      "   slope ca thal  heartdisease  \n",
      "0      3  0    6             0  \n",
      "1      2  3    3             2  \n",
      "2      2  2    7             1  \n",
      "3      3  0    3             0  \n",
      "4      1  0    3             0  \n",
      "\n",
      "Attributes and datatypes:\n",
      "age               int64\n",
      "gender            int64\n",
      "cp                int64\n",
      "trestbps          int64\n",
      "chol              int64\n",
      "fbs               int64\n",
      "restecg           int64\n",
      "thalach           int64\n",
      "exang             int64\n",
      "oldpeak         float64\n",
      "slope             int64\n",
      "ca               object\n",
      "thal             object\n",
      "heartdisease      int64\n",
      "dtype: object\n",
      "\n",
      "Column names in the dataset:\n",
      "Index(['age', 'gender', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',\n",
      "       'exang', 'oldpeak', 'slope', 'ca', 'thal', 'heartdisease'],\n",
      "      dtype='object')\n",
      "\n",
      "Learning CPD using Maximum likelihood estimators\n",
      "\n",
      "Inferencing with Bayesian Network:\n",
      "\n",
      "1. Probability of HeartDisease given evidence= restecg\n",
      "+-----------------+---------------------+\n",
      "| heartdisease    |   phi(heartdisease) |\n",
      "+=================+=====================+\n",
      "| heartdisease(0) |              0.1386 |\n",
      "+-----------------+---------------------+\n",
      "| heartdisease(1) |              0.0000 |\n",
      "+-----------------+---------------------+\n",
      "| heartdisease(2) |              0.2403 |\n",
      "+-----------------+---------------------+\n",
      "| heartdisease(3) |              0.2174 |\n",
      "+-----------------+---------------------+\n",
      "| heartdisease(4) |              0.4036 |\n",
      "+-----------------+---------------------+\n",
      "\n",
      "2. Probability of HeartDisease given evidence= cp\n",
      "+-----------------+---------------------+\n",
      "| heartdisease    |   phi(heartdisease) |\n",
      "+=================+=====================+\n",
      "| heartdisease(0) |              0.3791 |\n",
      "+-----------------+---------------------+\n",
      "| heartdisease(1) |              0.1944 |\n",
      "+-----------------+---------------------+\n",
      "| heartdisease(2) |              0.1533 |\n",
      "+-----------------+---------------------+\n",
      "| heartdisease(3) |              0.1355 |\n",
      "+-----------------+---------------------+\n",
      "| heartdisease(4) |              0.1377 |\n",
      "+-----------------+---------------------+\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pgmpy.estimators import MaximumLikelihoodEstimator\n",
    "from pgmpy.models import BayesianModel\n",
    "from pgmpy.inference import VariableElimination\n",
    "\n",
    "# Load the dataset\n",
    "heartDisease = pd.read_csv('/kaggle/input/heart-disease-csv/heartdisease.csv')\n",
    "heartDisease = heartDisease.replace('?', np.nan)\n",
    "\n",
    "# Print sample instances and data types\n",
    "print('Sample instances from the dataset are given below:')\n",
    "print(heartDisease.head())\n",
    "\n",
    "print('\\nAttributes and datatypes:')\n",
    "print(heartDisease.dtypes)\n",
    "\n",
    "# Ensure the column names are correct\n",
    "print('\\nColumn names in the dataset:')\n",
    "print(heartDisease.columns)\n",
    "\n",
    "# Define the model structure with the correct column names\n",
    "model = BayesianModel([\n",
    "    ('age', 'heartdisease'),       # 'heartdisease' corresponds to the target variable\n",
    "    ('exang', 'heartdisease'),\n",
    "    ('cp', 'heartdisease'),\n",
    "    ('heartdisease', 'restecg'),\n",
    "    ('heartdisease', 'chol')\n",
    "])\n",
    "\n",
    "# Learning CPD using Maximum Likelihood Estimators\n",
    "print('\\nLearning CPD using Maximum likelihood estimators')\n",
    "model.fit(heartDisease, estimator=MaximumLikelihoodEstimator)\n",
    "\n",
    "# Inferencing with Bayesian Network\n",
    "print('\\nInferencing with Bayesian Network:')\n",
    "HeartDisease_infer = VariableElimination(model)\n",
    "\n",
    "# Queries\n",
    "print('\\n1. Probability of HeartDisease given evidence= restecg')\n",
    "q1 = HeartDisease_infer.query(variables=['heartdisease'], evidence={'restecg': 1})\n",
    "print(q1)\n",
    "\n",
    "print('\\n2. Probability of HeartDisease given evidence= cp')\n",
    "q2 = HeartDisease_infer.query(variables=['heartdisease'], evidence={'cp': 1})\n",
    "print(q2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe5714cf",
   "metadata": {
    "papermill": {
     "duration": 0.010154,
     "end_time": "2024-07-22T17:34:43.252938",
     "exception": false,
     "start_time": "2024-07-22T17:34:43.242784",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "7)Aim: Implement and demonstrate the working model of K-means clustering algorithm with Expectation Maximization Concept.\n",
    "Program: Apply EM algorithm to cluster a set of data stored in a .CSV file. Use the same data set for clustering using k-Means algorithm. Compare the results of these two algorithms and comment on the quality of clustering. You can add Python ML library classes/API in the program."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c5268280",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:43.276767Z",
     "iopub.status.busy": "2024-07-22T17:34:43.276231Z",
     "iopub.status.idle": "2024-07-22T17:34:44.584203Z",
     "shell.execute_reply": "2024-07-22T17:34:44.582906Z"
    },
    "papermill": {
     "duration": 1.322998,
     "end_time": "2024-07-22T17:34:44.587162",
     "exception": false,
     "start_time": "2024-07-22T17:34:43.264164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   5.1  3.5  1.4  0.2  Iris-setosa\n",
      "0  4.9  3.0  1.4  0.2  Iris-setosa\n",
      "1  4.7  3.2  1.3  0.2  Iris-setosa\n",
      "2  4.6  3.1  1.5  0.2  Iris-setosa\n",
      "3  5.0  3.6  1.4  0.2  Iris-setosa\n",
      "4  5.4  3.9  1.7  0.4  Iris-setosa\n",
      "Index(['5.1', '3.5', '1.4', '0.2', 'Iris-setosa'], dtype='object')\n",
      "Number of columns: 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Adjusted Rand Index of K-Means:  0.6150051194844962\n",
      "The Silhouette Score of K-Means:  0.45655541185952575\n",
      "The Adjusted Rand Index of GMM:  0.9025775147114491\n",
      "The Silhouette Score of GMM:  0.37020510233493803\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.mixture import GaussianMixture\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import silhouette_score, adjusted_rand_score\n",
    "\n",
    "# Load the dataset\n",
    "csv_path = \"/kaggle/input/iris-2-csv/iris 2.csv\"\n",
    "dataset = pd.read_csv(csv_path)\n",
    "\n",
    "# Inspect columns\n",
    "print(dataset.head())\n",
    "print(dataset.columns)\n",
    "print(f\"Number of columns: {len(dataset.columns)}\")\n",
    "\n",
    "# Update column names based on inspection\n",
    "# Ensure the number of names matches the number of columns in the dataset\n",
    "names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class']\n",
    "dataset.columns = names\n",
    "\n",
    "# Prepare features and labels\n",
    "X = dataset.iloc[:, :-1]  # Features\n",
    "y = dataset['class'].map({'Iris-setosa': 0, 'Iris-versicolor': 1, 'Iris-virginica': 2})  # Labels\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "plt.figure(figsize=(18, 6))\n",
    "\n",
    "# REAL PLOT\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.title('Real')\n",
    "colormap = np.array(['red', 'lime', 'black'])\n",
    "plt.scatter(X_scaled[:, 2], X_scaled[:, 3], c=colormap[y])\n",
    "\n",
    "# K-Means Clustering\n",
    "kmeans_model = KMeans(n_clusters=3, random_state=0).fit(X_scaled)\n",
    "y_kmeans = kmeans_model.labels_\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.title('KMeans')\n",
    "plt.scatter(X_scaled[:, 2], X_scaled[:, 3], c=colormap[y_kmeans])\n",
    "print('The Adjusted Rand Index of K-Means: ', adjusted_rand_score(y, y_kmeans))\n",
    "print('The Silhouette Score of K-Means: ', silhouette_score(X_scaled, y_kmeans))\n",
    "\n",
    "# Gaussian Mixture Model (GMM)\n",
    "gmm_model = GaussianMixture(n_components=3, random_state=0).fit(X_scaled)\n",
    "y_gmm = gmm_model.predict(X_scaled)\n",
    "plt.subplot(1, 3, 3)\n",
    "plt.title('GMM Classification')\n",
    "plt.scatter(X_scaled[:, 2], X_scaled[:, 3], c=colormap[y_gmm])\n",
    "print('The Adjusted Rand Index of GMM: ', adjusted_rand_score(y, y_gmm))\n",
    "print('The Silhouette Score of GMM: ', silhouette_score(X_scaled, y_gmm))\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "121637d2",
   "metadata": {
    "papermill": {
     "duration": 0.012286,
     "end_time": "2024-07-22T17:34:44.611478",
     "exception": false,
     "start_time": "2024-07-22T17:34:44.599192",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "8)Aim: Demonstrate and analyse the results of classification based on KNN Algorithm.\n",
    "Program: Write a program to implement k-Nearest Neighbour algorithm to classify the iris data set. Print both correct and wrong predictions. Java/Python ML library classes can be used for this problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "02acde35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:44.637916Z",
     "iopub.status.busy": "2024-07-22T17:34:44.637477Z",
     "iopub.status.idle": "2024-07-22T17:34:44.665513Z",
     "shell.execute_reply": "2024-07-22T17:34:44.663968Z"
    },
    "papermill": {
     "duration": 0.044413,
     "end_time": "2024-07-22T17:34:44.668078",
     "exception": false,
     "start_time": "2024-07-22T17:34:44.623665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 1.0\n",
      "\n",
      "Correct predictions:\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 2 Actual: 2\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 1 Actual: 1\n",
      "Predicted: 0 Actual: 0\n",
      "Predicted: 0 Actual: 0\n",
      "\n",
      "Wrong predictions:\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Load Iris dataset\n",
    "iris = load_iris()\n",
    "X = iris.data\n",
    "y = iris.target\n",
    "\n",
    "# Split dataset into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Initialize k-NN classifier\n",
    "knn = KNeighborsClassifier(n_neighbors=3)\n",
    "\n",
    "# Train the classifier\n",
    "knn.fit(X_train, y_train)\n",
    "\n",
    "# Predict the labels for test set\n",
    "y_pred = knn.predict(X_test)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "\n",
    "# Print correct and wrong predictions\n",
    "print(\"\\nCorrect predictions:\")\n",
    "for i in range(len(y_test)):\n",
    "    if y_pred[i] == y_test[i]:\n",
    "        print(\"Predicted:\", y_pred[i], \"Actual:\", y_test[i])\n",
    "\n",
    "print(\"\\nWrong predictions:\")\n",
    "for i in range(len(y_test)):\n",
    "    if y_pred[i] != y_test[i]:\n",
    "        print(\"Predicted:\", y_pred[i], \"Actual:\", y_test[i])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c21d13e",
   "metadata": {
    "papermill": {
     "duration": 0.011854,
     "end_time": "2024-07-22T17:34:44.692078",
     "exception": false,
     "start_time": "2024-07-22T17:34:44.680224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "9. Implement the non-parametric Locally Weighted Regression algorithm in order to fit data\n",
    "points. Select appropriate data set for your experiment and draw graphs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2e114461",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:44.718460Z",
     "iopub.status.busy": "2024-07-22T17:34:44.718014Z",
     "iopub.status.idle": "2024-07-22T17:34:50.701827Z",
     "shell.execute_reply": "2024-07-22T17:34:50.700632Z"
    },
    "papermill": {
     "duration": 6.000241,
     "end_time": "2024-07-22T17:34:50.704577",
     "exception": false,
     "start_time": "2024-07-22T17:34:44.704336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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i4iIiCQsBS8iIiISVxS8iIiISFxR8CIiIiJxRcGLiIiIxBUFLyIiIhJXFLyIiIhIXFHwIiIiInFFwYuIiIjElZrR7kBV8ycMzsvLi3JPREREpLz879vlSfyfcMHLvn37AFOITEREROLLvn37SE1NLbNNwtU2Kioq4ocffqBBgwalloWvrLy8PFq2bMn333+vuklHoe9V+el7VX76XpWfvlcVo+9X+YXre+X1etm3bx8tWrSgRo2yV7Uk3MhLjRo1OPHEE8P6NVJSUvTDXU76XpWfvlflp+9V+el7VTH6fpVfOL5XRxtx8dOCXREREYkrCl5EREQkrih4qYDatWszbtw4ateuHe2uxDx9r8pP36vy0/eq/PS9qhh9v8ovFr5XCbdgV0RERBKbRl5EREQkrih4ERERkbii4EVERETiioIXERERiSsKXiqpV69enHTSSdSpU4fmzZtz880388MPP0S7WzHnv//9L7feeiutWrWibt26nHrqqYwbN46CgoJody0mPfbYY3Tp0oV69epx3HHHRbs7MeeZZ57h5JNPpk6dOnTq1IlPP/002l2KOcuXL6dnz560aNGCpKQk5s+fH+0uxawJEybwhz/8gQYNGtCkSRN69+7Npk2bot2tmPTcc8/x+9//PpCYrnPnzrz77rtR64+Cl0q6+OKLmT17Nps2bWLu3Lls2bKFPn36RLtbMWfjxo0UFRXxwgsv8OWXXzJ58mSef/557r///mh3LSYVFBTQt29fhg4dGu2uxJxZs2aRkZHBuHHjWLduHe3ataN79+78+OOP0e5aTDlw4ADt2rXjmWeeiXZXYt7HH3/MsGHDWL16NUuXLuXIkSNcfvnlHDhwINpdizknnngif/vb31i7di1r1qzhkksu4ZprruHLL7+MToe8UiUWLFjgTUpK8hYUFES7KzHviSee8LZq1Sra3Yhpr732mjc1NTXa3Ygp5557rnfYsGGBc8dxvC1atPBOmDAhir2KbYB33rx50e5G3Pjxxx+9gPfjjz+OdlfiwvHHH+99+eWXo/K1NfJSBfbs2cOMGTPo0qULtWrVinZ3Yl5ubi4NGzaMdjckjhQUFLB27Vq6desWuFajRg26devGqlWrotgzSSS5ubkA+vt0FI7jMHPmTA4cOEDnzp2j0gcFL8fg3nvv5Ve/+hWNGjVi69atLFiwINpdinmbN2/mqaee4vbbb492VySO/PTTTziOQ9OmTUOuN23alJ07d0apV5JIioqKGDFiBOeffz5nnXVWtLsTk/7zn/9Qv359ateuzR133MG8efNo27ZtVPqi4CXIfffdR1JSUpkfGzduDLQfNWoUn332GUuWLMHj8TBw4EC81SRhcUW/VwDbt2/niiuuoG/fvgwZMiRKPY+8ynyvRCSyhg0bxhdffMHMmTOj3ZWYdfrpp7N+/Xo++eQThg4dyqBBg9iwYUNU+qLyAEF2797Nzz//XGabU045heTk5BLXt23bRsuWLVm5cmXUhtEiqaLfqx9++IG0tDTOO+88pk6dSo0a1SdurszP1dSpUxkxYgR79+4Nc+/iQ0FBAfXq1WPOnDn07t07cH3QoEHs3btXo56lSEpKYt68eSHfMylp+PDhLFiwgOXLl9OqVatodydudOvWjVNPPZUXXngh4l+7ZsS/Ygxr3LgxjRs3rtS9RUVFAOTn51dll2JWRb5X27dv5+KLL6Zjx4689tpr1SpwgWP7uRIjOTmZjh07smzZssAbcVFREcuWLWP48OHR7ZzELa/Xy5133sm8efPIyclR4FJBRUVFUXvPU/BSCZ988gn//ve/ueCCCzj++OPZsmULY8eO5dRTT60Woy4VsX37dtLS0vjNb37DxIkT2b17d+DfmjVrFsWexaatW7eyZ88etm7diuM4rF+/HoDTTjuN+vXrR7dzUZaRkcGgQYM455xzOPfcc5kyZQoHDhxg8ODB0e5aTNm/fz+bN28OnH/33XesX7+ehg0bctJJJ0WxZ7Fn2LBhZGVlsWDBAho0aBBYP5WamkrdunWj3LvYMmbMGK688kpOOukk9u3bR1ZWFjk5Obz//vvR6VBU9jjFuc8//9x78cUXexs2bOitXbu29+STT/becccd3m3btkW7azHntdde8wKuH1LSoEGDXL9XH330UbS7FhOeeuop70knneRNTk72nnvuud7Vq1dHu0sx56OPPnL9GRo0aFC0uxZzSvvb9Nprr0W7azHnj3/8o/c3v/mNNzk52du4cWPvpZde6l2yZEnU+qM1LyIiIhJXqtfiAxEREYl7Cl5EREQkrih4ERERkbii4EVERETiioIXERERiSsKXkRERCSuKHgRERGRuKLgRUREROKKghcRERGJKwpeREREJK4oeBEREZG4ouBFRERE4sr/B1JhJfKaDIWKAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def local_regression(x0, X, Y, tau):\n",
    "    x0 = [1, x0]   \n",
    "    X = [[1, i] for i in X]\n",
    "    X = np.asarray(X)\n",
    "    xw = (X.T) * np.exp(np.sum((X - x0) ** 2, axis=1) / (-2 * tau))\n",
    "    beta = np.linalg.pinv(xw @ X) @ xw @ Y @ x0  \n",
    "    return beta    \n",
    "\n",
    "def draw(tau):\n",
    "    prediction = [local_regression(x0, X, Y, tau) for x0 in domain]\n",
    "    plt.plot(X, Y, 'o', color='black')\n",
    "    plt.plot(domain, prediction, color='red')\n",
    "    plt.show()\n",
    "\n",
    "X = np.linspace(-3, 3, num=1000)\n",
    "domain = X\n",
    "Y = np.log(np.abs(X ** 2 - 1) + .5)\n",
    "\n",
    "draw(10)\n",
    "draw(0.1)\n",
    "draw(0.01)\n",
    "draw(0.001)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62498d0a",
   "metadata": {
    "papermill": {
     "duration": 0.014189,
     "end_time": "2024-07-22T17:34:50.733452",
     "exception": false,
     "start_time": "2024-07-22T17:34:50.719263",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "10. Implement and demonstrate the working of SVM algorithm for classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a0b5f56c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-22T17:34:50.765172Z",
     "iopub.status.busy": "2024-07-22T17:34:50.764275Z",
     "iopub.status.idle": "2024-07-22T17:34:51.061534Z",
     "shell.execute_reply": "2024-07-22T17:34:51.060340Z"
    },
    "papermill": {
     "duration": 0.3166,
     "end_time": "2024-07-22T17:34:51.064629",
     "exception": false,
     "start_time": "2024-07-22T17:34:50.748029",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7333333333333333\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Importing necessary libraries\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Load the iris dataset\n",
    "iris = datasets.load_iris()\n",
    "X = iris.data[:, :2]  # Taking only the first two features for simplicity\n",
    "y = iris.target\n",
    "\n",
    "# Splitting the dataset into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Feature scaling\n",
    "sc = StandardScaler()\n",
    "X_train = sc.fit_transform(X_train)\n",
    "X_test = sc.transform(X_test)\n",
    "\n",
    "# Training the SVM model\n",
    "svm_classifier = SVC(kernel='linear', random_state=42)\n",
    "svm_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Predicting the test set results\n",
    "y_pred = svm_classifier.predict(X_test)\n",
    "\n",
    "# Calculating the accuracy of the model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "\n",
    "# Visualizing the decision boundary\n",
    "def plot_decision_boundary(classifier, X, y):\n",
    "    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
    "    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
    "    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),\n",
    "                         np.arange(y_min, y_max, 0.1))\n",
    "    Z = classifier.predict(np.c_[xx.ravel(), yy.ravel()])\n",
    "    Z = Z.reshape(xx.shape)\n",
    "    plt.contourf(xx, yy, Z, alpha=0.4, cmap=plt.cm.coolwarm)\n",
    "    plt.scatter(X[:, 0], X[:, 1], c=y, s=20, edgecolors='k', cmap=plt.cm.coolwarm)\n",
    "    plt.xlabel('Feature 1')\n",
    "    plt.ylabel('Feature 2')\n",
    "    plt.title('SVM Decision Boundary')\n",
    "    plt.show()\n",
    "\n",
    "# Plotting decision boundary\n",
    "plot_decision_boundary(svm_classifier, X_train, y_train)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5367700,
     "sourceId": 8923926,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5405088,
     "sourceId": 8976764,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5424296,
     "sourceId": 9004019,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5424369,
     "sourceId": 9004127,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 43.268857,
   "end_time": "2024-07-22T17:34:52.405878",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-22T17:34:09.137021",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
